Operation :
  1. make tests/threads/alarm-single.result
  2. pintos --gdb -s -- run alarm-zero
  3. backtrace kernel.o 0xc00277ef

Technical:
  1. Interruption handler cannot sleep --> check manual in detail for interruption. 
  2.

PROJECT 1 : THREAD

In task 1, when a thread is calling timer_sleep, we put it to block state to avoid scheduling.
In order to put the pending threads back to ready state, we do checking traversal at each time interruption. 
If the sleeping time is satisfied, unblock the sleeping thread and repush it into ready_list. 

In order to implement this, we need to record the time left in each thread info struct, using 
thread_foreach to traverse it. 

Implementation list: 
  0. block thread when it calls for sleep. Note that thread_block requires 
     turn off interruption manually. 
      (change timer_sleep function in timer.c)

  1. add field in thread struct. 
      (attach 'int snap_ticks' to 'thread' struct in thread.h)

  2. create thread_action_func for checking routine. 
      (append 'snap_ticks_check' thread_action_func above timer_interrupt in timer.c)

  3. apply thread_foreach in timer_interruption handler. 
      -> cheking will be performed in each timer_interruption. 

  4. modify 'thread_create' in 'thread.c' to initialize 'snap_ticks'. 

This will be clear and easy to implement. 

fixbugs : timer_sleep could receive 0 ticks -> no sleep. 



Task 2. Priority scheduling. 
Goals:
1. The next thread to run is chosen according to priority, both for ready_list and synch waiting list. 
2. priority inversion. 
3. reimplement thread_set_priority and thread_get_priority. 

Analysis: 
1. 'thread priority' is a field defined in 'struct thread'. 

2. THREAD SCHEDULE : function chooses which thread to run next in 'run_queue' -- 
    'next_thread_to_run' in 'thread.c', invoked by static 'schedule' in 'thread.c'. 

3. SYNCH : understand synchornization primitives to do priority scheduling for them.
    semaphore :
      sema_down : decrease a positive semaphore, if not positive, wait for it (block self).
      sema_up : increase semaphore, wake up one thread in waiting list, if any.

    lock :
      semaphore with initial value 1.
      only the thread who is acquiring can release it.
    
    monitor : 
      High-level group of data, lock, condition variable. focus on functionality. 
      
      Condition variable has cond_wait and cond_signal, which creates a two-level nested 
      sleep-and-wake-up. 
      
      In 'cond_wait', a new zero-init sema is created to wait for an happen-once event. 
      In 'cond_signal', one sema in CV's waiting list is picked up, and is 'up-ed', 
      indicating the condition is satisfied, and the wake-uped thread turns to wait for the lock. 

4. priority donation : 
    priority donation happens when a thread with higher priority waits for a thread with lower 
    priority. At this stage, H donates its priority to L. 
    'Lock' is the only pintos synchronization primitive we are interested in. 
    donation happens during lock-acquisition. 
    donation needs to be nested. 
    
    1. When lock is acquired by one thread, impose its priority to all threads in the waiting list. 
        --> make thread's priority a prioirty-queue of {thread_id, priority}, the thread's 
            effective priority is its maximum value. 
      * this method may be slow, but easy to implement. 

Implementation list:
    1. add fields to thread and lock.
    2. list_insert_ordered in list.h
    3. most of the work is done in synch.h. See Task 2 function declaration there. The code is well organized.

Bugfix : 
  1. When cur_thread yields, push it to ready_list first and then do schedule. 
  2. If multiple threads with the same priority, do round-robin. 
  3. A thread can set itself's base priority. If it has been donated, its effective priority is 
      the higher of the base and the donation. 
  4. define struct donate_bill. attach a bill-list as a thread field. 
  5. when modify donate_bills and setup new priority, make sure INTR_OFF. I assume this has been done in synch.


Task 3. Advanced Scheduler.
  Reading comprehension : 
    1. nice : thread field, inherited from parent thread, can be set. 
    2. priority calc : 
      calculated at thread initialization. recalculated once every fourth clock tick. 
      dependence : recent_cpu & nice. 
      round to nearest. 
    3. recent_cpu : 
      exponentially weighted moving average ??? 
      recent_cpu is 0 for first thread. other new thread inherits its parent's recent_cpu. 
      increment at each timer interruption. 
      recalculate once per second -> depends on load_avg. 
      (the rate of decay for 'recently' depends inversely proportional to the number of threads competing for the cpu). 
    4. load_avg : 
      A system-wide quantity instead of thread-specific. 
      initialized to be 0 at system boost. updated by exponential moving average policy. 

Scheduler mode selection specification :   
  You must write your code to allow us to choose a scheduling algorithm policy at Pintos startup time.
  By default, the priority scheduler must be active, but we must be able to choose the 4.4BSD scheduler with the ‘-mlfqs’ kernel option. 
  Passing this option sets thread_mlfqs, declared in ‘threads/thread.h’, to true when the options are parsed by parse_options(), which happens early in main().

  Turn off : 
    1. Choose thread to run based on priorities, but doesn't do priority donation. 
    2. Priority won't be set by threads themselves anymore. Disable it in thread_create() and thread_set_priority(). 



PROJECT 2 : USER-PROGRAM
Usr-program is wrapped with '_start'.
The kernel is initialized and simulated in thread/init.c.
Process_wait is wrapped by run_task.
To load user program and run, the code goes into /threads/init.c. if we are in thread mode, call 'run_test (task);' which
enters thread test. else if we are in user-program mode, call 'process_wait (process_execute (task));' which is defined in
/userprog/process.h.